/*
 *		静的APIが適切なドメインの囲みの中に記述されていないエラー検出
 *		のテスト(1)
 *
 *  $Id: pass2_dom1.cfg 649 2019-01-14 07:12:27Z ertl-hiro $
 */

#include "pass2_dom1.h"

DOMAIN(DOM1) {
	/*
	 *  エラーにならない静的API（SAC_XXXのテスト用）
	 */
	CRE_TSK(TASK1, { TA_NULL, 1, task1, MID_PRIORITY, STACK_SIZE, NULL });
	CRE_SEM(SEM1, { TA_NULL, 1, 1 });
	CRE_FLG(FLG1, { TA_NULL, 0U });
	CRE_DTQ(DTQ1, { TA_NULL, 10, NULL });
	CRE_PDQ(PDQ1, { TA_NULL, 10, 16, NULL });
	CRE_MTX(MTX1, { TA_NULL });
	CRE_MBF(MBF1, { TA_NULL, 10, TSZ_MBFMB(10,10), NULL });
	CRE_MPF(MPF1, { TA_NULL, 10, 100, NULL, NULL });
	CRE_CYC(CYC1, { TA_NULL, { TNFY_ACTTSK, TASK1 }, 1000, 1000 });
	CRE_ALM(ALM1, { TA_NULL, { TNFY_ACTTSK, TASK1 }});

	/*
	 *  ユーザドメインの囲みの中に記述するとエラーになる静的API
	 *
	 *  SAC_SYS，DEF_SCY，DEF_ICSは複数記述できないため，ここからは除く．
	 */
	CRE_CYC(CYC2, { TA_NULL, { TNFY_HANDLER, 2, cyclic2_handler }, 1000, 1000 });
	CRE_ALM(ALM2, { TA_NULL, { TNFY_HANDLER, 2, alarm2_handler }});
	ATT_REG("REG1", { TA_NULL, 0x80000000, 0x10000000 });
	CFG_INT(INTNO1, { TA_NULL, TMAX_INTPRI });
	CFG_INT(INTNO3, { TA_NULL, TMAX_INTPRI });
	CRE_ISR(ISR1, { TA_NULL, 1, INTNO3, isr1, 1 });
	DEF_INH(INHNO1, { TA_NULL, int1_handler });
	DEF_EXC(CPUEXC1, { TA_NULL, cpuexc1_handler });
	DEF_SVC(1, { TA_NULL, extended_svc1, 100 });
	CRE_SOM(SOM1, { TA_INISOM, SOM1 });
	ATT_TWD({ DOM1, SOM1, 1, 4000 });
	ATT_INI({ TA_NULL, 1, initialize1_routine });
	ATT_TER({ TA_NULL, 1, terminate1_routine });
}

KERNEL_DOMAIN {
	/*
	 *  CRE_XXXと異なるドメインの囲みの中に記述するとエラーになる静的API
	 */
	SAC_TSK(TASK1, { TACP_KERNEL, TACP_KERNEL, TACP_KERNEL, TACP_KERNEL });
	SAC_SEM(SEM1, { TACP_KERNEL, TACP_KERNEL, TACP_KERNEL, TACP_KERNEL });
	SAC_FLG(FLG1, { TACP_KERNEL, TACP_KERNEL, TACP_KERNEL, TACP_KERNEL });
	SAC_DTQ(DTQ1, { TACP_KERNEL, TACP_KERNEL, TACP_KERNEL, TACP_KERNEL });
	SAC_PDQ(PDQ1, { TACP_KERNEL, TACP_KERNEL, TACP_KERNEL, TACP_KERNEL });
	SAC_MTX(MTX1, { TACP_KERNEL, TACP_KERNEL, TACP_KERNEL, TACP_KERNEL });
	SAC_MBF(MBF1, { TACP_KERNEL, TACP_KERNEL, TACP_KERNEL, TACP_KERNEL });
	SAC_MPF(MPF1, { TACP_KERNEL, TACP_KERNEL, TACP_KERNEL, TACP_KERNEL });
	SAC_CYC(CYC1, { TACP_KERNEL, TACP_KERNEL, TACP_KERNEL, TACP_KERNEL });
	SAC_ALM(ALM1, { TACP_KERNEL, TACP_KERNEL, TACP_KERNEL, TACP_KERNEL });

	/*
	 *  カーネルドメインの囲みの中に記述するとエラーになる静的API
	 */
	ATT_REG("REG2", { TA_NULL, 0x90000000, 0x10000000 });
	DEF_SCY({ 10000 });
}

/*
 *  ドメインの囲みの中に記述しないとエラーになる静的API
 */
CRE_TSK(TASK2, { TA_NULL, 2, task2, MID_PRIORITY, STACK_SIZE, NULL });
CRE_CYC(CYC3, { TA_NULL, { TNFY_ACTTSK, TASK1 }, 1000, 1000 });
CRE_CYC(CYC4, { TA_NULL, { TNFY_HANDLER, 4, cyclic4_handler }, 1000, 1000 });
CRE_ALM(ALM3, { TA_NULL, { TNFY_ACTTSK, TASK1 }});
CRE_ALM(ALM4, { TA_NULL, { TNFY_HANDLER, 4, alarm4_handler }});
SAC_SYS({ TACP_KERNEL, TACP_KERNEL, TACP_KERNEL, TACP_KERNEL });
CFG_INT(INTNO2, { TA_NULL, TMAX_INTPRI });
CFG_INT(INTNO4, { TA_NULL, TMAX_INTPRI });
CRE_ISR(ISR2, { TA_NULL, 2, INTNO4, isr2, 1 });
DEF_INH(INHNO2, { TA_NULL, int2_handler });
DEF_EXC(CPUEXC2, { TA_NULL, cpuexc2_handler });
DEF_SVC(2, { TA_NULL, extended_svc2, 100 });
LMT_DOM({ 3 });
CRE_SOM(SOM2, { TA_NULL, SOM1 });
ATT_TWD({ DOM1, SOM2, 1, 5000 });
DEF_ICS({ 10000, istack });
ATT_INI({ TA_NULL, 2, initialize2_routine });
ATT_TER({ TA_NULL, 2, terminate2_routine });
