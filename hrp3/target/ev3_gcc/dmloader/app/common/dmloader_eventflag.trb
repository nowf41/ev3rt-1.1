# ==================== 
# Handle CRE_FLG
# Input:
#     $moduleCfgC
#     $moduleCfgH
#     $modCfgTab
# Output:
#     Event flag IDs in 'module_cfg.h/.c'
#     _module_cflg_tab in 'module_cfg.c'
#     $modCfgTab (updated)
# ====================

$cfgData[:CRE_FLG].each{|_, params|
  # Check user domain
  if $domData[params[:domain]][:domid].str != "TDOM_APP"
    error_ercd("E_NOSPT", params, "Event flag must belong to TDOM_APP in dynamic loading mode")
  end

  # Generate IDs
  flgid = params[:flgid].str
  $moduleCfgH.add("extern ID _module_id_#{flgid};")
  $moduleCfgH.add("#define #{flgid} ((const ID)(_module_id_#{flgid}))")
  $moduleCfgC.add(<<EOS)
ID _module_id_#{flgid} __attribute__((section (".module.text")));
EOS
}

#
# Generate '_module_cflg_tab' and update '_module_cfg_tab'
#
if $cfgData[:CRE_FLG].size > 0
$moduleCfgC.add("static const T_CFLG _module_cflg_tab[#{$cfgData[:CRE_FLG].size}] = {")
$cfgData[:CRE_FLG].each_with_index{|(_, params), index|
  $moduleCfgC.add("\t{ #{params[:flgatr]}, #{params[:iflgptn]} },")
  $modCfgTab.push({:sfncd => "TSFN_CRE_FLG", :argument => "&_module_cflg_tab[#{index}]", :retvalptr => "&_module_id_#{params[:flgid]}"})
}
$moduleCfgC.add2("};")
end

