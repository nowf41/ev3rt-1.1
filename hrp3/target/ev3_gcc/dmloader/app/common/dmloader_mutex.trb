# ==================== 
# Handle CRE_MTX
# Input:
#     $moduleCfgC
#     $moduleCfgH
#     $modCfgTab
# Output:
#     Mutex IDs in 'module_cfg.h/.c'
#     _module_cmtx_tab in 'module_cfg.c'
#     $modCfgTab (updated)
# ====================

$cfgData[:CRE_MTX].each{|_, params|
  # Check user domain
  if $domData[params[:domain]][:domid].str != "TDOM_APP"
    error_ercd("E_NOSPT", params, "Mutex must belong to TDOM_APP in dynamic loading mode")
  end

  # mtxatrが無効の場合（E_RSATR）［NGKI2025］［NGKI2010］
  #（TA_NULL，TA_TPRI，TA_CEILINGのいずれでもない場合）
  if !(params[:mtxatr] == $TA_NULL || params[:mtxatr] == $TA_TPRI \
									|| params[:mtxatr] == $TA_CEILING)
    error_illegal_id("E_RSATR", params, :mtxatr, :mtxid)
  end

  if params[:mtxatr] == $TA_CEILING
    # 優先度上限ミューテックスの場合
    # ceilpriの記述が省略されている場合［NGKI2035］
    if !params.has_key?(:ceilpri)
      error_api(params, "ceilpri must be specified in %apiname of %mtxid")

    # ceilpriが有効範囲外の場合（E_PAR）［NGKI2037］
    #（TMIN_TPRI <= ceilpri && ceilpri <= TMAX_TPRIでない場合）
    elsif !($TMIN_TPRI <= params[:ceilpri] && params[:ceilpri] <= $TMAX_TPRI)
      error_illegal_id("E_PAR", params, :ceilpri, :mtxid)
    end
  else
    # 優先度上限ミューテックスでない場合
    # ceilpriが記述されている場合は警告メッセージを出す
    if params.has_key?(:ceilpri)
      warning_api(params, "%%ceilpri is ignored in %apiname of %mtxid")
    end
    params[:ceilpri] = 0
  end

  # Generate IDs
  mtxid = params[:mtxid].str
  $moduleCfgH.add("extern ID _module_id_#{mtxid};")
  $moduleCfgH.add("#define #{mtxid} ((const ID)(_module_id_#{mtxid}))")
  $moduleCfgC.add(<<EOS)
ID _module_id_#{mtxid} __attribute__((section (".module.text")));
EOS
}

#
# Generate '_module_cmtx_tab' and update '_module_cfg_tab'
#
if $cfgData[:CRE_MTX].size > 0
$moduleCfgC.add("static const T_CMTX _module_cmtx_tab[#{$cfgData[:CRE_MTX].size}] = {")
$cfgData[:CRE_MTX].each_with_index{|(_, params), index|
  $moduleCfgC.add("\t{ #{params[:mtxatr]}, #{params[:ceilpri]} },")
  $modCfgTab.push({:sfncd => "TSFN_CRE_MTX", :argument => "&_module_cmtx_tab[#{index}]", :retvalptr => "&_module_id_#{params[:mtxid]}"})
}
$moduleCfgC.add2("};")
end

