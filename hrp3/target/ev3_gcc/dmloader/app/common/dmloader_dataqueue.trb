# ==================== 
# Handle CRE_DTQ
# Input:
#     $moduleCfgC
#     $moduleCfgH
#     $modCfgTab
# Output:
#     Data queue IDs in 'module_cfg.h/.c'
#     _module_cdtq_tab in 'module_cfg.c'
#     $modCfgTab (updated)
# ====================

$cfgData[:CRE_DTQ].each{|_, params|
  # Check user domain
  if $domData[params[:domain]][:domid].str != "TDOM_APP"
    error_ercd("E_NOSPT", params, "Data queue must belong to TDOM_APP in dynamic loading mode")
  end

  # dtqatrが無効の場合（E_RSATR）［NGKI1669］［NGKI1661］
  #（TA_TPRI以外のビットがセットされている場合）
  if (params[:dtqatr] & ~($TA_TPRI)) != 0
    error_illegal_id("E_RSATR", params, :dtqatr, :dtqid)
  end

  # dtqmbがNULLでない場合（E_NOSPT）［HRPS0121］
  if params[:dtqmb] != "NULL"
    error_illegal_id("E_NOSPT", params, :dtqmb, :dtqid)
  end

  # dtqcntが負の場合（E_PAR）
  if params[:dtqcnt] < 0
    error_illegal_id("E_PAR", params, :dtqcnt, :dtqid)
  end

  # Generate IDs
  dtqid = params[:dtqid].str
  $moduleCfgH.add("extern ID _module_id_#{dtqid};")
  $moduleCfgH.add("#define #{dtqid} ((const ID)(_module_id_#{dtqid}))")
  $moduleCfgC.add(<<EOS)
ID _module_id_#{dtqid} __attribute__((section (".module.text")));
EOS
}

#
# Generate '_module_cdtq_tab' and update '_module_cfg_tab'
#
if $cfgData[:CRE_DTQ].size > 0
$moduleCfgC.add("static const T_CDTQ _module_cdtq_tab[#{$cfgData[:CRE_DTQ].size}] = {")
$cfgData[:CRE_DTQ].each_with_index{|(_, params), index|
  $moduleCfgC.add("\t{ #{params[:dtqatr]}, #{params[:dtqcnt]}, #{params[:dtqmb]} },")
  $modCfgTab.push({:sfncd => "TSFN_CRE_DTQ", :argument => "&_module_cdtq_tab[#{index}]", :retvalptr => "&_module_id_#{params[:dtqid]}"})
}
$moduleCfgC.add2("};")
end

